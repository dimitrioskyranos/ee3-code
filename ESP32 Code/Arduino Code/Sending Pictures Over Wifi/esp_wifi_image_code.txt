#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h> // WebSocket library
#include <HardwareSerial.h>

// Wi-Fi credentials
const char* ssid = "iPhone - Dimitris";
const char* password = "123456789";

// Web server on port 80
WebServer server(80);

// WebSocket server on port 81
WebSocketsServer webSocket(81);

// UART buffer settings
const int bufferSize = 8192;      // Buffer size for image data
uint8_t imgBuffer[bufferSize];    // Image data buffer
int imgSize = 0;                  // Current size of image in buffer
bool imageReady = false;          // Flag to indicate when the image is complete

// UART hardware instance
HardwareSerial mySerial(1); // Using UART1 for OpenMV communication

void setup() {
  // Initialize Serial for debugging
  Serial.begin(115200);
  Serial.println("Initializing ESP32...");

  // Initialize UART for communication with OpenMV
  mySerial.begin(115200, SERIAL_8N1, 18, 17); // RX=GPIO18, TX=GPIO17
  mySerial.setRxBufferSize(bufferSize);
  Serial.println("UART initialized for OpenMV");

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Start WebSocket server
  webSocket.begin();
  webSocket.onEvent(handleWebSocketEvent);

  // Start HTTP server
  server.on("/status", []() {
    server.send(200, "text/plain", "ESP32 is running");
  });
  server.begin();
  Serial.println("HTTP and WebSocket servers started");
}

void loop() {
  // Handle HTTP client requests
  server.handleClient();

  // Handle WebSocket connections
  webSocket.loop();

  // Read UART data from OpenMV
  readUART();

  // Transmit image data if ready
  if (imageReady) {
    sendImageToWebSocket();
    imageReady = false; // Reset flag after sending
  }
}

void readUART() {
  if (!imageReady && mySerial.available() > 0) {
    while (mySerial.available() > 0 && imgSize < bufferSize) {
      uint8_t byte = mySerial.read();
      imgBuffer[imgSize++] = byte;

      // Debug: Print each byte received
      Serial.print("Byte received: 0x");
      if (byte < 0x10) Serial.print("0"); // Leading zero for single-digit hex
      Serial.println(byte, HEX);

      // Check for JPEG End-Of-Image marker (0xFFD9)
      if (imgSize > 1 && imgBuffer[imgSize - 2] == 0xFF && imgBuffer[imgSize - 1] == 0xD9) {
        Serial.println("End of image detected");
        imageReady = true;
        break;
      }
    }

    if (imgSize >= bufferSize) {
      Serial.println("Image buffer overflow! Resetting buffer");
      imgSize = 0; // Reset buffer
    }
  }
}

void sendImageToWebSocket() {
  Serial.print("Sending image to WebSocket clients, size: ");
  Serial.println(imgSize);

  // Send data in chunks of 512 bytes
  for (int i = 0; i < imgSize; i += 512) {
    int chunkSize = min(512, imgSize - i);
    webSocket.broadcastBIN(imgBuffer + i, chunkSize);
  }

  Serial.println("Image sent successfully");
  imgSize = 0; // Reset buffer
}

void handleWebSocketEvent(uint8_t clientNum, WStype_t type, uint8_t *payload, size_t length) {
  if (type == WStype_CONNECTED) {
    Serial.println("WebSocket client connected");
  } else if (type == WStype_DISCONNECTED) {
    Serial.println("WebSocket client disconnected");
  }
}