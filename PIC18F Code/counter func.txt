static void TMR0_DefaultCallback(void)
{
    // Default callback
    if (counter == 32)
    {
//        sleep(2000);
        counter = 0; 
    }
    
    counter++;
    
    if(SPI1_IsTxReady())
    {
        SPI1_ByteWrite(counter);
    }
    
    
}


static volatile uint8_t test = 0;

void SPI_TransmitCompleteHandler(uint8_t *test)
{
    
    // Code to execute after SPI transmission is complete
    // For example, toggle an LED or prepare the next byte to send
    
   if( SPI1_IsRxReady())
   {
      test = SPI1_ByteRead();
      PORTB = test;
   }
}


int main(void)
{
   
    SYSTEM_Initialize();
    // If using interrupts in PIC18 High/Low Priority Mode you need to enable the Global High and Low Interrupts 
    // If using interrupts in PIC Mid-Range Compatibility Mode you need to enable the Global Interrupts 
    // Use the following macros to: 

    // Enable the Global High Interrupts 
    INTERRUPT_GlobalInterruptHighEnable(); 
    SPI1_Initialize();
    SPI1_Open(HOST_CONFIG);
    SPI1_TxCompleteCallbackRegister(SPI_TransmitCompleteHandler);
    TMR0_Start();
    
    // Disable the Global High Interrupts 
    //INTERRUPT_GlobalInterruptHighDisable(); 

    // Enable the Global Low Interrupts 
    //INTERRUPT_GlobalInterruptLowEnable(); 

    // Disable the Global Low Interrupts 
    //INTERRUPT_GlobalInterruptLowDisable(); 


    while(1)
    {
        
    }    
}