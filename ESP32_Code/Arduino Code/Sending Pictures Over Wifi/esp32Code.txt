#include <WiFi.h>
#include <WebServer.h>
#include <HardwareSerial.h>
#include <WebSocketsServer.h> // Add WebSocket library

// Wi-Fi credentials
const char* ssid = "iPhone - Dimitris";
const char* password = "123456789";

// Web server on port 80
WebServer server(80);

// WebSocket server on port 81
WebSocketsServer webSocket(81);

// UART buffer settings
const int bufferSize = 8192;  // Increased buffer size for larger image data
uint8_t imgBuffer[bufferSize]; // Buffer to hold the image data
int imgSize = 0;               // Tracks the size of image data in the buffer
bool imageReady = false;       // Flag to indicate when a complete image is ready

// HardwareSerial instance for UART communication
HardwareSerial mySerial(1); // Using UART1 for communication with OpenMV

void setup() {
  Serial.begin(115200);           // Initialize Serial for debugging
  mySerial.begin(115200, SERIAL_8N1, 18, 17); // Initialize UART1, RX=GPIO18, TX=GPIO17
  mySerial.setRxBufferSize(8192); // Set UART RX buffer size to accommodate larger images
  Serial.println("Serial initialized successfully");

  // Set up Wi-Fi connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Start WebSocket server
  webSocket.begin();
  webSocket.onEvent([](uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
    if (type == WStype_CONNECTED) {
      Serial.println("WebSocket client connected");
    } else if (type == WStype_DISCONNECTED) {
      Serial.println("WebSocket client disconnected");
    } else if (type == WStype_TEXT) {
      // If the WebSocket receives a text message (for debugging)
      Serial.print("Received text: ");
      Serial.println((char*)payload);
    } else if (type == WStype_BIN) {
      // If the WebSocket receives binary data (image data)
      Serial.println("Received image data (binary):");

      // Print the raw bytes received
      for (size_t i = 0; i < length; i++) {
        Serial.print("0x");
        if (payload[i] < 0x10) Serial.print("0");
        Serial.print(payload[i], HEX);
        Serial.print(" ");
      }
      Serial.println(); // End of received bytes print
    }
  });

  // Define /status endpoint
  server.on("/status", HTTP_GET, []() {
    server.send(200, "text/plain", "ESP is connected!");
  });

  // Start the HTTP server
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  // Handle incoming HTTP client requests
  server.handleClient();

  // Handle WebSocket connections
  webSocket.loop();

  // Only read new data if a complete image is not already ready
  if (!imageReady && mySerial.available() > 0) {
    // Read data into the buffer until the buffer is full or until end-of-image marker is detected
    bool endOfImage = false;
    while (mySerial.available() > 0 && imgSize < bufferSize) {
      uint8_t byte = mySerial.read();
      imgBuffer[imgSize++] = byte;

      // Print every byte received in hexadecimal format for debugging
      Serial.print("Byte received: 0x");
      if (byte < 0x10) Serial.print("0"); 
      Serial.println(byte, HEX);

      // Check for JPEG End-Of-Image marker 0xFFD9
      if (imgSize > 1 && imgBuffer[imgSize - 2] == 0xFF && imgBuffer[imgSize - 1] == 0xD9) {
        endOfImage = true;
        break; // End of image detected
      }
    }

    if (endOfImage) {
      Serial.print("Complete image received from OpenMV with size: ");
      Serial.println(imgSize);  // Print image size when complete
      imageReady = true;        // Set flag to indicate the image is ready for transmission
    } else if (imgSize >= bufferSize) {
      // If buffer is full without a complete image, reset it
      Serial.println("Image buffer overflow or incomplete image received");
      imgSize = 0; // Reset if overflow or incomplete image
    }
  }

  // Send the complete image when ready
  if (imageReady) {
    if (webSocket.connectedClients() > 0) {
      Serial.println("Sending image to WebSocket clients...");
      
      // Send in chunks of 512 bytes
      for (int i = 0; i < imgSize; i += 512) {
        int chunkSize = min(512, imgSize - i);
        webSocket.broadcastBIN(imgBuffer + i, chunkSize); // Broadcast image in chunks
        Serial.print("Sent chunk of size: ");
        Serial.println(chunkSize);
      }

      // Reset buffer after sending the image
      imgSize = 0;
      imageReady = false;
    }
  }

  delay(10); // Short delay to make sure UART reads without blocking other operations
}